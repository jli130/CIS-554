//HW4 Due: Oct. 15, Saturday at 11:59pm.
#include <iostream>
using namespace std;

class node {
public:
	int value;
	node* Lchild;
	node* Rchild;
	node(int i) : value(i), Lchild{ nullptr }, Rchild{ nullptr } {}
	node() { Lchild = Rchild = nullptr; }
};
class tree {//Full binary trees: 1, 3, 7, 15 ,   2^k-1 nodes
public:
	node* root;
	tree() { root = nullptr; }
	tree(int n, int m);//constructor for an n-level full binary tree with random values in 0 ... m-1
	tree(const initializer_list<int>& I);//Preorder Traversal will give the same sequence as in initializer list

	node* Cont_help(int n, int m);//Help function for constructor to perform recursive operations.
	void InOrderT(node* p);//Inorder Traversal of a subtree whose root is pointed by p
	void PreOrderT(node* p);//Preorder Traversal ...
	void PostOrderT(node* p);//Postorder Traversal ...
	node* Sort(node* p);



	/*
	HW4 is to implement the following initializer list and sort.

	tree(const initializer_list<int>& I);//Preorder Traversal will give the same sequence as in initializer list

	You can create a help function IL_help() to perform recursive operation for initializer list.
	... IL_help( .... ); //You only can return either return int or node *
	Note that you have to design the return type and function parameter(s) for IL_help.

	... Sort(node *p); //Sort the subtree pointed by p; After sorting, Postorder Traversal will give an ascending (i.e., increasing) sequence.
	You need to design the return type Sort.  In addition to recursion, you are allowed to use while loop, but not for loop.
	You are not allowed to use any help function for Sort.
	*/

};

node* IL_help(const initializer_list<int>& I, int d, const int* it) {
	if (d == 0) return nullptr;
	node* p1 = new node(*it);
	it++;
	p1->Lchild = IL_help(I, d - 1, it);
	int curMid = pow(2, d) / 2;
	for (auto i = 1; i != curMid; i++)
	{
		it++;
	}
	p1->Rchild = IL_help(I, d - 1, it);
	return p1;
}


tree::tree(const initializer_list<int>& I){
	root = IL_help(I, int(log2(I.size() - 1) + 1), I.begin());
	}



node* tree::Sort(node* p) {
	if (!p) return nullptr ;
	if (!p->Lchild) {
		return p;
	}
	node* minR = Sort(p->Rchild); 

	while (minR->value < p->Lchild->value) {
		swap(minR->value, p->Lchild->value);
		Sort(p->Lchild); 
		Sort(p->Rchild);
	}
	if (p->value < p->Lchild->value) {
		swap(p->value, p->Lchild->value);
		Sort(p->Lchild);
	}
	if (p->value < p->Rchild->value) {
		swap(p->value, p->Rchild->value);
		Sort(p->Rchild); 
	}

	return Sort(p->Lchild);
}

node* tree::Cont_help(int n, int m) {
	if (n == 0) return nullptr;
	node* p{ new node{rand() % m} };
	p->Lchild = Cont_help(n - 1, m);
	p->Rchild = Cont_help(n - 1, m);
	return p;
}

tree::tree(int n, int m) {
	root = Cont_help(n, m);
}


void tree::PostOrderT(node* p) {
	if (!p) return;
	PostOrderT(p->Lchild);
	//cout << p->value << " ";
	PostOrderT(p->Rchild);
	cout << p->value << " ";
}

void tree::PreOrderT(node* p) {
	if (!p) return;
	cout << p->value << " ";
	PreOrderT(p->Lchild);
	//cout << p->value << " ";
	PreOrderT(p->Rchild);
}

void tree::InOrderT(node* p) {
	if (!p) return;
	InOrderT(p->Lchild);
	cout << p->value << " ";
	InOrderT(p->Rchild);

}



int main() {




	tree T1{ 0,1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};// , 3, 4, 5, 6

	T1.InOrderT(T1.root);
	cout << endl;
	T1.PreOrderT(T1.root);
	cout << endl;
	T1.PostOrderT(T1.root);
	cout << endl;
	cout << endl;


	cout << endl;
	tree T2(6, 15);

	T2.InOrderT(T2.root);
	cout << endl;
	T2.PreOrderT(T2.root);
	cout << endl;
	T2.PostOrderT(T2.root);
	cout << endl;

	T2.Sort(T2.root);
	T2.InOrderT(T2.root);
	cout << endl;
	T2.PreOrderT(T2.root);
	cout << endl;
	T2.PostOrderT(T2.root);
	cout << endl;
	return 0;
}
