//HW2
//Due: 11:59PM, September 27 (Tuesday)

#include <iostream>
#include <list>
#include <map>
#include <string>

using namespace std;

class course {
public:
	string name;//CIS554
	int section;//1
	int credits;//3
	string grade;//A-
	course() {}
	course(string n, int s, int c, string g) { name = n; section = s; credits = c; grade = g; }

	//You might need to implement some overloaded operators here.
	bool operator<(const course& c) const;//second const protect *this
	bool operator==(const course& c) const;
	float num_grade();

};
//Implement the following functions.
//When adding a student, if the student is already in DB, then ignore the operation.
//When adding a course, if the course is already in DB (even if it is in
//a different semester, then ignore the operation.
//When dropping a course, if the course does not exist, then ignore the operation.
//When removing a student, if the student does not exist, then ignore the operation.
//All courses in a semester need to be sorted.
//When dropping or adding a course, overall GPA, semester GPA, overall credits and semester credits all need to be updated.

//Semeser numbers:  Spring 2019: 20191; Fall 2019: 20192, etc. 

void add_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int id);
void remove_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int id);
void add_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int semester, int id, course c); //20171 Spring semester of 2017; 20172: Fall semester of 2017
//All courses in the list should be sorted according to name (increasing order)
void drop_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int semester, int id, course c);
void print_student_semester_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int semester, int id);
void print_student_all_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int id);

//Implement additional functions such that you can do
//cout << DB << endl;

//You might need to implement some overloaded operators in the course class.
ostream& operator<<(ostream& str, const course& A) { str << A.name << " " << A.section << " " << A.credits << " " << A.grade; return str; }



float course::num_grade() {
	map<string, float> M{

		{"A",	4},
		{"A-" , 3.667},
		{"B+" , 3.333},
		{"B",	3},
		{"B-" , 2.667},
		{"C+" , 2.333},
		{"C",	2},
		{"C-" , 1.667},
		{"D",	1},
		{"D-" , 0.667},
		{"F",	0}
	};
	return M[grade];
}


ostream& operator<<(ostream& str, const list<course*> l) {

	for (auto k : l) {
		str << "(";
		str << *k;
		str << ") ";
	}

	return str;
}
ostream& operator<<(ostream& str, map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB) {
	str << "DB: " << endl;
	for (auto i : DB) {
		str << "ID: " << i.first << endl;
		str << "Overall GPA: " << get<1>(i.second) << endl;
		str << "Overall Credits: " << get<0>(i.second) << endl;
		for (auto j : *(get<2>(i.second))) {
			str << "Semester: " << j.first << endl;
			str << "GPA: " << get<1>(j.second) << endl;
			str << "Credits: " << get<0>(j.second) << endl;
			for (auto k : *(get<2>(j.second))) {
				str << "(";
				str << *k ;
				str << ") ";
			}
			str << endl;
		}
	}
	str << endl;
	return str;
}


int main() {
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >* >>  DB;
	add_student(DB, 11111);
	course C1("CIS554", 1, 3, "A-"), C2("CSE674", 1, 3, "B+"), C3("MAT296", 8, 4, "A"), C4("WRT205", 5, 3, "A");

	add_course(DB, 20171, 11111, C1);
	add_course(DB, 20171, 11111, C4);
	add_course(DB, 20171, 11111, C3);
	add_course(DB, 20171, 11111, C2);
	print_student_semester_courses(DB, 20171, 11111);

	drop_course(DB, 20171, 11111, C1);
	print_student_semester_courses(DB, 20171, 11111); //sorted according to course name

	course C5("CIS351", 2, 3, "A-"), C6("PSY205", 5, 3, "B+"), C7("MAT331", 2, 3, "A"), C8("ECN203", 4, 3, "A");
	add_course(DB, 20172, 11111, C5);
	add_course(DB, 20172, 11111, C6);
	add_course(DB, 20172, 11111, C7);
	add_course(DB, 20172, 11111, C8);
	add_course(DB, 20172, 11111, C3);
	print_student_all_courses(DB, 11111);//ID GPA

	add_student(DB, 11112);
	add_course(DB, 20171, 11112, C2);
	add_course(DB, 20171, 11112, C5);
	add_course(DB, 20171, 11112, C7);
	add_course(DB, 20171, 11112, C4);
	print_student_semester_courses(DB, 20171, 11112);

	add_course(DB, 20172, 11112, C8);
	add_course(DB, 20172, 11112, C3);
	add_course(DB, 20172, 11112, C5);
	add_course(DB, 20172, 11112, C1);
	print_student_semester_courses(DB, 20172, 11112);

	print_student_all_courses(DB, 11112);//print using  cout

	cout << DB << endl;//ostream & operator<<(....  
	remove_student(DB, 11111);
	cout << DB << endl;
	return 0;
}

void add_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int id) {
	if (DB.find(id) != DB.end()) return;
	DB[id] = { 0, 0.0f, new map<int, tuple<int, float, list<course*>*> > {} };

}
void remove_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int id) {
	if (DB.find(id) == DB.end()) return;
	auto& r1{ *get<2>(DB[id]) };
	for (auto i : r1) {
		auto& r2{ *(get<2>(i.second)) };
		for (auto k : r2) {
			delete k;
		}
		delete& r2;
	}
	delete& r1;
	DB.erase(id);
}


void add_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int semester, int id, course c) {
	if (DB.find(id) == DB.end()) return;
	auto& r1{ *get<2>(DB[id]) };
	for (auto k : r1) {
		auto j = *(get<2>(k.second));
		for (auto i = j.begin(); i != j.end(); i++) {
				if ((*i)->name == c.name) {
					return;
				}
		}
	}
	if (r1.find(semester) == r1.end()) { // semester does not exist
		list<course*>* current = new list<course*>;
		r1.insert(pair<int, tuple<int, float, list<course*>*>>(semester, { 0, 0.0f, current }));
		// insert the course at the beginning
		current->insert(current->begin(), new course(c.name, c.section, c.credits, c.grade));
		int tempCre = 0;
		float tempGrade = 0;
		int totalCre = 0;
		float totalGrade = 0;
		for (auto i : *get<2>(r1[semester])) {
			tempCre += i->credits;
			tempGrade += i->num_grade() * i->credits;
		}
		for (auto &u : r1) {
			for (auto k : (*get<2>(r1[u.first]))) {
				totalCre += k->credits;
				totalGrade += k->num_grade() * k->credits;
			}
		}
		tempGrade = tempGrade / tempCre;
		get<0>(r1[semester]) = tempCre;
		get<1>(r1[semester]) = roundf(tempGrade * 100) / 100;
		totalGrade = totalGrade / totalCre;
		get<0>(DB[id]) = totalCre;
		get<1>(DB[id]) = roundf(totalGrade * 100) / 100;
	}
	else {
		auto& r2{ *get<2>(r1[semester]) };
		// check existence of course
		for (auto i = r2.begin(); i != r2.end(); i++) {
			if ((*i)->name == c.name) {
				return;
			}
			else if (c.name < (*i)->name) {
				r2.insert(i, new course(c.name, c.section, c.credits, c.grade));
				int tempCre = 0;
				float tempGrade = 0;
				int totalCre = 0;
				float totalGrade = 0;
				for (auto i : *get<2>(r1[semester])) {
					tempCre += i->credits;
					tempGrade += i->num_grade() * i->credits;
				}
				for (auto& u : r1) {
					for (auto k : (*get<2>(r1[u.first]))) {
						totalCre += k->credits;
						totalGrade += k->num_grade() * k->credits;
					}
				}
				tempGrade = tempGrade / tempCre;
				get<0>(r1[semester]) = tempCre;
				get<1>(r1[semester]) = roundf(tempGrade * 100) / 100;
				totalGrade = totalGrade / totalCre;
				get<0>(DB[id]) = totalCre;
				get<1>(DB[id]) = roundf(totalGrade * 100) / 100;
				return;
			}
		}
		// c is the greatest course in this list, so add at the end
		r2.push_back(new course(c.name, c.section, c.credits, c.grade));
		int tempCre = 0;
		float tempGrade = 0;
		int totalCre = 0;
		float totalGrade = 0;
		for (auto i : *get<2>(r1[semester])) {
			tempCre += i->credits;
			tempGrade += i->num_grade() * i->credits;
		}
		for (auto& u : r1) {
			for (auto k : (*get<2>(r1[u.first]))) {
				totalCre += k->credits;
				totalGrade += k->num_grade() * k->credits;
			}
		}
		tempGrade = tempGrade / tempCre;
		get<0>(r1[semester]) = tempCre;
		get<1>(r1[semester]) = roundf(tempGrade * 100) / 100;
		totalGrade = totalGrade / totalCre;
		get<0>(DB[id]) = totalCre;
		get<1>(DB[id]) = roundf(totalGrade * 100) / 100;
	}
	

}

void drop_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int semester, int id, course c) {
	if (DB.find(id) == DB.end()) return;
	auto& r1{ *get<2>(DB[id]) };
	if (r1.find(semester) == r1.end()) { // semester does not exist
		return;
	}
	else {
		auto& r2{ *get<2>(r1[semester]) };
		// check existence of course
		for (auto i = r2.begin(); i != r2.end(); i++) {
			if ((*i)->name == c.name) {
				auto removed = remove(r2.begin(), r2.end(), *i);
				r2.erase(removed, r2.end());
				int tempCre = 0;
				float tempGrade = 0;
				int totalCre = 0;
				float totalGrade = 0;
				for (auto i : *get<2>(r1[semester])) {
					tempCre += i->credits;
					tempGrade += i->num_grade() * i->credits;
				}
				for (auto& u : r1) {
					for (auto k : (*get<2>(r1[u.first]))) {
						totalCre += k->credits;
						totalGrade += k->num_grade() * k->credits;
					}
				}
				tempGrade = tempGrade / tempCre;
				get<0>(r1[semester]) = tempCre;
				get<1>(r1[semester]) = roundf(tempGrade * 100) / 100;
				totalGrade = totalGrade / totalCre;
				get<0>(DB[id]) = totalCre;
				get<1>(DB[id]) = roundf(totalGrade * 100) / 100;
				return;
			}
		}
		return;
	}


	

}

void print_student_semester_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int semester, int id) {
	if (DB.find(id) == DB.end()) return;
	auto& r1{ *get<2>(DB[id]) };
	if (r1.find(semester) == r1.end()) return;
	auto& r2{ *get<2>(r1[semester]) };
	cout << "ID: " << id << endl;
	cout << "Semester: " << semester << endl;
	cout << "GPA: " << get<1>(r1[semester]) << endl;;
	cout << "Credits: " << get<0>(r1[semester]) << endl;
	cout << r2 << endl;

}
void print_student_all_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>>& DB, int id) {
	if (DB.find(id) == DB.end()) return;
	cout << "ID: " << id << endl;
	cout << "Overall GPA: " << get<1>(DB[id]) << endl;;
	cout << "Overall Credits: " << get<0>(DB[id]) << endl;
	for (auto j : (*(get<2>(DB[id])))) {
		cout << "Semester: " << j.first << endl;
		cout << "GPA: " << get<1>(j.second) << endl;
		cout << "Credits: " << get<0>(j.second) << endl;
		for (auto k : *(get<2>(j.second))) {
				cout << "(";
				cout << *k;
				cout << ") ";
			}
		cout << endl;
		}
	cout << endl;

}