//HW1 By											Jiashu Li
//												Net ID: jli130    SUID:551972972
/*
Implement Reverse, Sort1, Sort2
You are not allowed to use any external structures (such as array)
You are not allowed to use any help function
You are not allowed to create any extra node.
*/
#include <iostream>
using namespace std;

class Dnode {
public:
	int value;
	Dnode* next;
	Dnode* previous;
	Dnode(int i) { value = i; next = previous = nullptr; }
	Dnode() { next = previous = nullptr; }
};

class DLL {//Doubly Linked List
public:
	Dnode* head;
	Dnode* tail;
	DLL(int n, int m);//Constructor; Construct an n-node DLL with random
	//values in 0 ... m-1
	DLL() { head = tail = nullptr; }
	void PrintF();//Print forward from head
	void PrintB();//Print backward from tail
	void RemoveAll(int k);//Delete all nodes with value k.
	void Reverse();
	void Sort1();//Insertion sort.  Only allowed to change pointers, but not values
	void Sort2();//Insertion sort.  Only alllowed to change values, but not pointers
};

void DLL::Sort1() {
	if (!head || !head->next) return;
	Dnode* p1{ head }, * p2, * temp;
	while (p1->next) {
		if (p1->next->value >= p1->value) {
			p1 = p1->next;
			continue;
		}
		p2 = p1->next;
		p1->next = p2->next;
		if (head->value >= p2->value) {
			if (p2->next) {
				p2->next->previous = p2->previous;
				p2->previous->next = p2->next;
				p2->next = head;
				head->previous = p2;
				p2->previous = nullptr;
				head = p2;
				continue;
			}
			else {
				p2->previous->next = nullptr;
				p2->next = head;
				head->previous = p2;
				p2->previous = nullptr;
				head = p2;
				continue;

			}
		}
		temp = head;
		while (temp != p1) {
			if (temp->next->value > p2->value) {
				if (p2->next) {
					p2->next->previous = p2->previous;
					p2->previous = temp;
					p2->next = temp->next;
					temp->next->previous = p2;
					temp->next = p2;
					break;
				}
				else {
					p2->previous->next = nullptr;
					p2->previous = temp;
					p2->next = temp->next;
					temp->next->previous = p2;
					temp->next = p2;
					break;
				}
			}
			temp = temp->next;
		}

	}

}



void DLL::Sort2() {
	if (!head || !head->next) return;
	Dnode* p1{ head }, * p2;
	while (p1) {
		p2 = p1->next;
		while (p2 && p2->previous && p2->value < p2->previous->value) {
			int num = p2->value;
			p2->value = p2->previous->value;
			p2->previous->value = num;
			p2 = p2->previous;
		}
		p1 = p1->next;
	}

}



void DLL::Reverse() {
	if (!head || !head->next) return;
	Dnode* p1{ head }, * p2{ nullptr };
	while (p1) {
		p1->previous = p1->next;
		p1->next = p2;
		p2 = p1;
		p1 = p1->previous;
	}
	head = p2;


}


void DLL::RemoveAll(int k) {
	if (!head) return;//empty
	Dnode* p1{ head };
	while (p1) {//while p1 is not nullptr
		Dnode* p2 = p1->next;
		if (p1->value == k) {
			if (p1 == head && p1 == tail) {
				head = tail = nullptr;
				delete p1;
				return;
			}
			else if (p1 == head) {
				head = p1->next;
				head->previous = nullptr;
				delete p1;
			}
			else if (p1 == tail) {
				tail = p1->previous;
				tail->next = nullptr;
				delete p1;
			}
			else {
				p1->previous->next = p1->next;
				p1->next->previous = p1->previous;
				delete p1;
			}
		}
		p1 = p2;

	}

}


DLL::DLL(int n, int m) {
	head = tail = nullptr;
	for (int i = 0; i < n; ++i) {
		Dnode* p1{ new Dnode{rand() % m} };
		if (!head) {//empty 
			head = tail = p1;
		}
		else {
			tail->next = p1;
			p1->previous = tail;
			tail = p1;
		}
	}
}

void DLL::PrintF() {
	cout << endl;
	Dnode* p1{ head };
	while (p1) {
		cout << p1->value << " ";
		p1 = p1->next;
	}
}

void DLL::PrintB() {
	cout << endl;
	Dnode* p1{ tail };
	while (p1) {
		cout << p1->value << " ";
		p1 = p1->previous;
	}


}


int main() {
	DLL  L1{ 30, 20 };
	L1.PrintF();
	L1.PrintB();
	L1.RemoveAll(1);
	L1.PrintF();
	L1.PrintB();
	L1.Sort1();
	L1.PrintF();
	L1.PrintB();

	DLL L2{ 29, 15 };
	L2.PrintF();
	L2.PrintB();
	L2.Reverse();
	L2.PrintF();
	L2.PrintB();
	L2.Sort2();
	L2.PrintF();
	L2.PrintB();


	return 0;
}




